import pandas as pd
import openai
import tqdm
import os
from os.path import join, dirname
from dotenv import load_dotenv

# Loading env variables
dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

openai_api_key = os.environ["OPENAI_API_KEY"]
openai.api_key = openai_api_key

file_path = './data_type_res/data_type.csv'
new_file_path = 'final_result_code4ml.csv'
data = pd.read_csv(file_path)

# Add columns for results
if 'last_result' not in data.columns:
    data['last_result'] = ''
if 'last_score' not in data.columns:
    data['last_score'] = ''

# Function to generate the first prompt
def generate_first_prompt(code):
    return f"""

Analyze the provided code and extract the following information:

a) The main task or problem the code is trying to solve
b) Key input data and its characteristics
c) Expected output or result

Come up with what task was given to write this code in 1-2 sentences that includes:

a) A clear statement of the task's objective
b) A brief description of the input data
c) A concise explanation of the desired output or result

NOTE that you task must not include any information about solution (data preprocessing, model name). 

An example of a good task description: 
“Lets develop a predictive model to estimate the prices of houses. The provided dataset includes a test set with unique identifiers (IDs), and your task is to predict the corresponding values for the target variable, "price." Each ID in the test set should be associated with an accurate and reliable prediction of its corresponding house price. The success of your model will be evaluated based on its ability to generate precise and meaningful predictions for the given test set.”

Avoid phrases "use ensemble models" or "neural networks", pretend that you've never seen the code and you don't know how to solve the task.

Code:

{code}

YOU MUST NOT DESCRIBE THE CODE AND WRITE ANYTHING ABOUT THE CODE. YOU MUST COME UP WITH THE TASK!!! YOU ARE NOT THE CODE DESCRIBER, YOU MUST ONLY MAKE THE TAKS TO BE SOLVED BY THIS CODE.
LOOK AT THE EXAMPLE AND DO THE SAME. YOU RESULT CANNOT CONTAINT THE WORD "CODE", YOU MUST PRETEND THAT YOU'VE NEVER SEEN THIS CODE! 
STRICTLY FOLLOW THE EXAMPLE!
Description:
"""

# Function to generate the second prompt
def generate_second_prompt(description):
    return f"""
Evaluation Criteria: Appropriateness of Task Description

- A score of B: Description is Not Appropriate enough: the task is not described carefully, it would be hard to be solved.
- A score of C: Description is Partially Appropriate: description lacks the information about task or data used in the task.
- A score of D: Description is Highly Appropriate: clearly articulates the problem the code is solving, includes essential information about inputs and expected outputs.
For example: Develop a prediction model for estimating the duration of New York taxi trips. Given various datasets containing weather conditions, route information, and geographic details, the objective is to predict the trip duration based on features such as city, county, distance, time, and weather conditions. The success of the model will be assessed based on its accuracy in predicting the trip durations for a given test dataset.
Explanation: This example describes the problem and data well, but does not provide any hints about which models to use or how many models to use.
- A score of A: Description is Inappropriate: description focuses on implementation details (contains model name, information about data preprocessing) rather than the problem.
For example: Develop a combined prediction model using multiple approaches for a financial market scenario. The task is to generate predictions based on features from a financial dataset linking with embeddings and neural network techniques. The goal is to make accurate trading decisions based on the predictions generated by combining different models.
Explanation: This example provides hints for writing code, such as the use of combined model and neural network techniques. If descriptions suggests using multiple models always choose A score.

Evaluation Strategy:
Score the task description on a scale of A-D based on how well it captures the essence of the problem the code is solving, without revealing implementation details. You need to evaluate the task carefully and give a good grade only if the task really meets the requirements. The task should not give any hints for solutions, not even information about the types and number of models to be used. YOU MUST RETURN ONLY NUMBER FROM A-D, AND NOTHING ELSE.
Description: {description}
Score:
"""

# Function to generate the improvement prompt
def generate_improvement_prompt(description, code, score):
    return f"""
How can this description be written in a more appropriate way?

Description: {description}
Score description:
- A score of B: Description is Not Appropriate enough: the task is not described carefully, it would be hard to be solved.
- A score of C: Description is Partially Appropriate: description lacks the information about task or data used in the task.
- A score of D: Description is Highly Appropriate: clearly articulates the problem the code is solving, includes essential information about inputs and expected outputs.
For example: Develop a prediction model for estimating the duration of New York taxi trips. Given various datasets containing weather conditions, route information, and geographic details, the objective is to predict the trip duration based on features such as city, county, distance, time, and weather conditions. The success of the model will be assessed based on its accuracy in predicting the trip durations for a given test dataset.
Explanation: This example describes the problem and data well, but does not provide any hints about which models to use or how many models to use.
- A score of A: Description is Inappropriate: description focuses on implementation details (contains model name, information about data preprocessing) rather than the problem.
For example: Develop a combined prediction model using multiple approaches for a financial market scenario. The task is to generate predictions based on features from a financial dataset linking with embeddings and neural network techniques. The goal is to make accurate trading decisions based on the predictions generated by combining different models.
Explanation: This example provides hints for writing code, such as the use of combined model and neural network techniques. If descriptions suggests using multiple models always choose A score.

Score: {score}
Code: {code}
Return only improved description and nothing else
Improved description:
"""

# Function to call OpenAI API and get the response
def get_openai_response_gpt3(prompt, role="user"):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": role, "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()

def get_openai_response_gpt4(prompt, role="user"):
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": role, "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()

print('Updated code')
# Process each row in the CSV file
cnt = 0
for idx, row in tqdm.tqdm(data.iterrows(), total=data.shape[0]):
    code = row['code']
    
    try:
        first_prompt = generate_first_prompt(code)
        task_description = get_openai_response_gpt3(first_prompt)
        
        second_prompt = generate_second_prompt(task_description)
        score = get_openai_response_gpt4(second_prompt)
        print(score)
        
        # Save the result and score to the dataframe
        data.at[idx, 'last_result'] = task_description
        data.at[idx, 'last_score'] = score
        
        # If score is A or B, improve the description
        while score in ['A', 'B']:
            print('redact')
            improvement_prompt = generate_improvement_prompt(task_description, code, score)
            task_description = get_openai_response_gpt3(improvement_prompt)
            second_prompt = generate_second_prompt(task_description)
            score = get_openai_response_gpt4(second_prompt)
            
            # Save the improved result and new score
            data.at[idx, 'last_result'] = task_description
            break

        cnt += 1

        if cnt % 10 == 0:
            data.to_csv(f'final_result_code4ml_{cnt}.csv', index=False)

    except openai.error.InvalidRequestError:
        print('OPENAI ERROR')

data.to_csv(new_file_path, index=False)
